# 定义GitHub Actions的工作流名称为“Push”
name: Push

# 当有代码推送到仓库时，触发该工作流
on: [push]

# 定义多个任务（jobs），其中包括测试任务和代码质量检查任务
jobs:
  # 定义测试任务
  test:
    # 设置任务执行策略
    strategy:
      # 当一个job失败时，继续执行其他job
      fail-fast: false
      # 定义矩阵配置，这将生成不同的组合以便并行执行
      matrix:
        # 使用Python 3.11版本
        python-version: ["3.11"]
        # 使用Poetry 1.8.3版本
        poetry-version: ["1.8.3"]
        # 在最新版本的Ubuntu操作系统上运行
        os: [ubuntu-latest]

    # 设置任务运行时所用的操作系统
    runs-on: ${{ matrix.os }}

    # 定义任务步骤
    steps:
      # 检出当前仓库的最新代码
      - uses: actions/checkout@v3

      # 设置Python环境
      - uses: actions/setup-python@v3
        with:
          # 使用矩阵中定义的Python版本
          python-version: ${{ matrix.python-version }}

      # 运行Poetry
      - name: Run image
        uses: abatilo/actions-poetry@v2.1.4
        with:
          # 使用矩阵中定义的Poetry版本
          poetry-version: ${{ matrix.poetry-version }}

      # 安装项目依赖
      - name: Install dependencies
        run: poetry install

      # 运行测试并生成覆盖率报告
      - name: Run tests
        run: poetry run pytest --cov=./ --cov-report=xml

      # 将覆盖率报告上传到Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # 定义代码质量检查任务
  code-quality:
    # 设置任务执行策略
    strategy:
      # 当一个job失败时，继续执行其他job
      fail-fast: false
      # 定义矩阵配置，这将生成不同的组合以便并行执行
      matrix:
        # 使用Python 3.11版本
        python-version: ["3.11"]
        # 使用Poetry 1.8.3版本
        poetry-version: ["1.8.3"]
        # 在最新版本的Ubuntu操作系统上运行
        os: [ubuntu-latest]

    # 设置任务运行时所用的操作系统
    runs-on: ${{ matrix.os }}

    # 定义任务步骤
    steps:
      # 检出当前仓库的最新代码
      - uses: actions/checkout@v3

      # 设置Python环境
      - uses: actions/setup-python@v3
        with:
          # 使用矩阵中定义的Python版本
          python-version: ${{ matrix.python-version }}

      # 运行Poetry
      - name: Run image
        uses: abatilo/actions-poetry@v2.1.4
        with:
          # 使用矩阵中定义的Poetry版本
          poetry-version: ${{ matrix.poetry-version }}

      # 安装项目依赖
      - name: Install dependencies
        run: poetry install

      # 使用black进行代码格式检查
      - name: Run black
        run: poetry run black . --check

      # 使用isort进行导入排序检查
      - name: Run isort
        run: poetry run isort . --check-only --profile black

      # 使用flake8进行代码质量检查
      - name: Run flake8
        run: poetry run flake8 .
        continue-on-error: true

      # 使用bandit进行安全性检查
      - name: Run bandit
        run: poetry run bandit .
        continue-on-error: true

      # 使用safety检查项目中的依赖安全性
      - name: Run safety
        run: poetry run safety check
        continue-on-error: true
